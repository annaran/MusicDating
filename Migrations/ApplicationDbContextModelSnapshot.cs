// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicDating.Data;

namespace MusicDating.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Newsletter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<string>("Postcode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProfileStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "63842def-25af-4884-895d-1dd0ce23c0c5",
                            DateCreated = new DateTime(2020, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "daniel@daniel.dk",
                            EmailConfirmed = false,
                            FirstName = "Daniel",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            Newsletter = false,
                            PhoneNumberConfirmed = false,
                            ProfileStatus = false,
                            SecurityStamp = "4cc2735e-576a-48aa-9886-96edaab3a473",
                            TwoFactorEnabled = false,
                            UserName = "daniel@daniel.dk"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "93f909c5-cb65-42b7-9810-7f33cf81f279",
                            DateCreated = new DateTime(2020, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simone@simone.dk",
                            EmailConfirmed = false,
                            FirstName = "Simone",
                            LastName = "White",
                            LockoutEnabled = false,
                            Newsletter = false,
                            PhoneNumberConfirmed = false,
                            ProfileStatus = false,
                            SecurityStamp = "b9e41e23-61ed-47dc-83ba-cef87cef3489",
                            TwoFactorEnabled = false,
                            UserName = "simone@simone.dk"
                        });
                });

            modelBuilder.Entity("EnsembleGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnsembleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GenreId", "EnsembleId");

                    b.HasIndex("EnsembleId");

                    b.ToTable("EnsembleGenre");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            EnsembleId = 1
                        },
                        new
                        {
                            GenreId = 2,
                            EnsembleId = 1
                        },
                        new
                        {
                            GenreId = 1,
                            EnsembleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Postcode")
                        .HasColumnType("TEXT");

                    b.HasKey("AgentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Ensemble", b =>
                {
                    b.Property<int>("EnsembleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Homepage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PlayProject")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PlayRegular")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Postcode")
                        .HasColumnType("TEXT");

                    b.Property<int>("PracticeFrequencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SizeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnsembleId");

                    b.HasIndex("PracticeFrequencyId");

                    b.HasIndex("SizeId");

                    b.ToTable("Ensembles");

                    b.HasData(
                        new
                        {
                            EnsembleId = 1,
                            City = "Kobenhavn",
                            Description = "Cool band",
                            Name = "Spice Girls",
                            PlayProject = false,
                            PlayRegular = false,
                            Postcode = "2200",
                            PracticeFrequencyId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            EnsembleId = 2,
                            City = "Kobenhavn",
                            Description = "Cool band",
                            Name = "U2",
                            PlayProject = false,
                            PlayRegular = false,
                            Postcode = "2200",
                            PracticeFrequencyId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            EnsembleId = 3,
                            City = "Kobenhavn",
                            Description = "Cool band",
                            Name = "3 doors down",
                            PlayProject = false,
                            PlayRegular = false,
                            Postcode = "2200",
                            PracticeFrequencyId = 1,
                            SizeId = 1
                        });
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AgentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GenreId");

                    b.HasIndex("AgentId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Classical"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Rock"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Blues"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Country"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Pop"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Jazz"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Metal"
                        },
                        new
                        {
                            GenreId = 8,
                            Name = "Folk"
                        },
                        new
                        {
                            GenreId = 9,
                            Name = "HipHop"
                        },
                        new
                        {
                            GenreId = 10,
                            Name = "PunkRock"
                        });
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Instrument", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InstrumentId");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            InstrumentId = 1,
                            Name = "Piano"
                        },
                        new
                        {
                            InstrumentId = 2,
                            Name = "Violin"
                        },
                        new
                        {
                            InstrumentId = 3,
                            Name = "Trumpet"
                        },
                        new
                        {
                            InstrumentId = 4,
                            Name = "Saxophone"
                        },
                        new
                        {
                            InstrumentId = 5,
                            Name = "Cello"
                        },
                        new
                        {
                            InstrumentId = 6,
                            Name = "Accordion"
                        },
                        new
                        {
                            InstrumentId = 7,
                            Name = "Flute"
                        },
                        new
                        {
                            InstrumentId = 8,
                            Name = "Drums"
                        },
                        new
                        {
                            InstrumentId = 9,
                            Name = "Guitar"
                        });
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnsembleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EnsembleId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("MusicDating.Models.Entities.PracticeFrequency", b =>
                {
                    b.Property<int>("PracticeFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("PracticeFrequencyId");

                    b.ToTable("PracticeFrequencies");

                    b.HasData(
                        new
                        {
                            PracticeFrequencyId = 1,
                            Description = "Many times a week"
                        },
                        new
                        {
                            PracticeFrequencyId = 2,
                            Description = "1 time a week"
                        },
                        new
                        {
                            PracticeFrequencyId = 3,
                            Description = "1 time every other week"
                        },
                        new
                        {
                            PracticeFrequencyId = 4,
                            Description = "1 time a month"
                        },
                        new
                        {
                            PracticeFrequencyId = 5,
                            Description = "1 time every other month or less"
                        });
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            Description = "1 - 4 musicians"
                        },
                        new
                        {
                            SizeId = 2,
                            Description = "5 - 9 musicians"
                        },
                        new
                        {
                            SizeId = 3,
                            Description = "10 - 24 musicians"
                        },
                        new
                        {
                            SizeId = 4,
                            Description = "25 - 49 musicians"
                        },
                        new
                        {
                            SizeId = 5,
                            Description = "50 or more musicians"
                        });
                });

            modelBuilder.Entity("MusicDating.Models.Entities.UserInstrument", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApplicationUserId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("UserInstruments");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "1",
                            InstrumentId = 7,
                            Level = 1
                        },
                        new
                        {
                            ApplicationUserId = "1",
                            InstrumentId = 8,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = "1",
                            InstrumentId = 9,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = "2",
                            InstrumentId = 8,
                            Level = 3
                        },
                        new
                        {
                            ApplicationUserId = "2",
                            InstrumentId = 9,
                            Level = 1
                        });
                });

            modelBuilder.Entity("PostGenre", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PostId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("PostGenres");
                });

            modelBuilder.Entity("UserInstrumentGenre", b =>
                {
                    b.Property<int>("UserInstrumentGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserInstrumentGenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ApplicationUserId", "InstrumentId");

                    b.ToTable("UserInstrumentGenres");

                    b.HasData(
                        new
                        {
                            UserInstrumentGenreId = 1,
                            ApplicationUserId = "1",
                            GenreId = 1,
                            InstrumentId = 7
                        },
                        new
                        {
                            UserInstrumentGenreId = 2,
                            ApplicationUserId = "1",
                            GenreId = 3,
                            InstrumentId = 7
                        },
                        new
                        {
                            UserInstrumentGenreId = 3,
                            ApplicationUserId = "1",
                            GenreId = 3,
                            InstrumentId = 8
                        },
                        new
                        {
                            UserInstrumentGenreId = 4,
                            ApplicationUserId = "1",
                            GenreId = 2,
                            InstrumentId = 9
                        },
                        new
                        {
                            UserInstrumentGenreId = 5,
                            ApplicationUserId = "2",
                            GenreId = 2,
                            InstrumentId = 8
                        },
                        new
                        {
                            UserInstrumentGenreId = 6,
                            ApplicationUserId = "2",
                            GenreId = 7,
                            InstrumentId = 9
                        },
                        new
                        {
                            UserInstrumentGenreId = 7,
                            ApplicationUserId = "2",
                            GenreId = 1,
                            InstrumentId = 9
                        },
                        new
                        {
                            UserInstrumentGenreId = 8,
                            ApplicationUserId = "2",
                            GenreId = 4,
                            InstrumentId = 9
                        },
                        new
                        {
                            UserInstrumentGenreId = 9,
                            ApplicationUserId = "2",
                            GenreId = 6,
                            InstrumentId = 9
                        });
                });

            modelBuilder.Entity("EnsembleGenre", b =>
                {
                    b.HasOne("MusicDating.Models.Entities.Ensemble", "Ensemble")
                        .WithMany("EnsembleGenres")
                        .HasForeignKey("EnsembleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicDating.Models.Entities.Genre", "Genre")
                        .WithMany("EnsembleGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Agent", b =>
                {
                    b.HasOne("MusicDating.Models.Entities.Instrument", "Instrument")
                        .WithMany("Agents")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Ensemble", b =>
                {
                    b.HasOne("MusicDating.Models.Entities.PracticeFrequency", "PracticeFrequency")
                        .WithMany()
                        .HasForeignKey("PracticeFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicDating.Models.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Genre", b =>
                {
                    b.HasOne("MusicDating.Models.Entities.Agent", null)
                        .WithMany("Genres")
                        .HasForeignKey("AgentId");
                });

            modelBuilder.Entity("MusicDating.Models.Entities.Post", b =>
                {
                    b.HasOne("ApplicationUser", "ApplicationUser")
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MusicDating.Models.Entities.Ensemble", "Ensemble")
                        .WithMany()
                        .HasForeignKey("EnsembleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicDating.Models.Entities.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicDating.Models.Entities.UserInstrument", b =>
                {
                    b.HasOne("ApplicationUser", "ApplicationUser")
                        .WithMany("UserInstruments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicDating.Models.Entities.Instrument", "Instrument")
                        .WithMany("UserInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostGenre", b =>
                {
                    b.HasOne("MusicDating.Models.Entities.Genre", "Genre")
                        .WithMany("PostGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicDating.Models.Entities.Post", "Post")
                        .WithMany("PostGenres")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserInstrumentGenre", b =>
                {
                    b.HasOne("MusicDating.Models.Entities.Genre", "Genre")
                        .WithMany("UserInstrumentGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicDating.Models.Entities.UserInstrument", "UserInstrument")
                        .WithMany("UserInstrumentGenres")
                        .HasForeignKey("ApplicationUserId", "InstrumentId");
                });
#pragma warning restore 612, 618
        }
    }
}
